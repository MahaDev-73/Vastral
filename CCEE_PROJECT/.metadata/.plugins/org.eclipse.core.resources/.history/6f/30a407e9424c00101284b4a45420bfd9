package com.sunbeam.restcontroller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.sunbeam.entities.Customer;
import com.sunbeam.models.Credentials;

//import com.sunbeam.security.JwtUtil;
import com.sunbeam.services.CustomerService;


@RestController
public class CustomerController {
	private CustomerService userService;
	//@Autowired
	//private AuthenticationManager authManager;
//	@Autowired
//	private JwtUtil jwtUtil;
//	
	@Autowired
	public CustomerController(CustomerService userService) {
		this.userService = userService;
	}

//	@Autowired
//	PasswordEncoder pwen;
	
//	@PostMapping("/authenticate")
//	public ResponseEntity<?> authenticate(@RequestBody Credentials cr) {
//		// authenticate user with authentication manager		
//		System.out.println(cr.toString());
//		Authentication auth = new UsernamePasswordAuthenticationToken(cr.getEmail(), cr.getPassword());
//		System.out.println("BEFORE AUTH: " + auth);
//		auth = authManager.authenticate(auth);
//		System.out.println("AFTER AUTH: " + auth);
		// after authentication, create JWT token and return.
//		String token = jwtUtil.createToken(auth);
//		return ResponseEntity.ok(token);
	}
	
//	@GetMapping("/cust/profile")
//	public ResponseEntity<?> getProfile() {
//	    // Get the email (username) of logged-in user
//	    Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//	    String email = auth.getName();
//
//	    // Find user by email
//	    Customer customer = userService.findByEmail(email);
//	    if (customer == null)
//	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
//
//	    // Return user profile (excluding password)
//	    customer.setPassword(null); // donâ€™t expose password
//	    return ResponseEntity.ok(customer);
//	}
//	
//	@DeleteMapping("/admin/delete/{id}")
//	public ResponseEntity<?> deleteUserById(@PathVariable int id) {
//	    Customer user = userService.findById(id);
//	    if (user == null)
//	        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
//
//	    userService.deleteById(id);
//	    return ResponseEntity.ok("User deleted successfully");
//	}



